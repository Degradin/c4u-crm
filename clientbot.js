require('dotenv').config();
const { Telegraf, Markup, session } = require('telegraf');
const { MongoClient } = require('mongodb');
const { initializeDatabase, getUserByPhone, createUser, updateUser } = require('./database');
const { createCanvas, loadImage, registerFont  } = require('canvas');
const path = require('path');

const bot = new Telegraf(process.env.CLIENT_BOT_TOKEN);
let db;

const roles = {
    DEV: 'developer',
    ADMIN: 'admin',
    MANAGER: 'manager',
    CLIENT: 'client'
};

// Middleware to initialize session
bot.use(session());

// Middleware to initialize session data
bot.use(async (ctx, next) => {
    if (!ctx.session) {
        ctx.session = {};
    }
    if (ctx.from) {
        const user = await db.collection('users').findOne({ telegramId: ctx.from.id });
        if (user) {
            ctx.session.user = user;
        } else {
            ctx.session.user = null;
        }
    }
    return next();
});

// –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
bot.command('start', async (ctx) => {
    const chatId = ctx.chat.id;
    if (!ctx.session.user) {
        ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.', {
            reply_markup: {
                keyboard: [
                    [{
                        text: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                        request_contact: true,
                    }],
                ],
                one_time_keyboard: true,
                resize_keyboard: true,
            },
        });
    } else {
        ctx.reply('–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ.', mainMenu());
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
bot.on('contact', async (ctx) => {
    const chatId = ctx.chat.id;
    const phoneNumber = ctx.message.contact.phone_number;

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const normalizedPhone = normalizePhoneNumber(phoneNumber);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–ª–∏–µ–Ω—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    let user = await getUserByPhone(db, normalizedPhone);

    if (user) {
        // –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ telegramId
        await updateUser(db, user._id, { telegramId: ctx.from.id, authorized: true });
        ctx.session.user = user;
    } else {
        // –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await createUser(db, { phone: normalizedPhone, telegramId: ctx.from.id, role: roles.CLIENT, level: 1, bonusBalance: 0, authorized: true });
        ctx.session.user = user;
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    const message = '–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.';
    const reply = await ctx.reply(message, Markup.keyboard(['üíõ –ü—Ä–æ—Ñ–∏–ª—å'], resize_keyboard, one_time_keyboard));
    ctx.session.messageId = reply.message_id;
});

// –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
function normalizePhoneNumber(phone) {
    phone = phone.replace(/[^0-9]/g, ''); // –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    if (phone.startsWith('8')) {
        phone = '+7' + phone.slice(1); // –ó–∞–º–µ–Ω–∏—Ç—å 8 –Ω–∞ +7
    } else if (phone.startsWith('7')) {
        phone = '+7' + phone.slice(1); // –ó–∞–º–µ–Ω–∏—Ç—å 7 –Ω–∞ +7
    } else if (!phone.startsWith('+7')) {
        phone = '+7' + phone; // –î–æ–±–∞–≤–∏—Ç—å +7, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    }
    return phone;
}

// –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
function mainMenu() {
    return Markup.inlineKeyboard([
        [Markup.button.callback('–ü—Ä–æ—Ñ–∏–ª—å', 'profile')],
        [Markup.button.callback('–ú–æ–∏ –ø–µ—á–∞—Ç–∏', 'my_stamps')],
        [Markup.button.callback('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings')],
    ]);
}

bot.hears('üíõ –ü—Ä–æ—Ñ–∏–ª—å', async (ctx) => {
    const user = ctx.session.user;
    if (user) {
        const message = `–ü—Ä–æ—Ñ–∏–ª—å:
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone}
üìä –£—Ä–æ–≤–µ–Ω—å: ${user.level}
üí∞ –ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${user.bonusBalance}`;

        await ctx.sendMessage(message, Markup.inlineKeyboard([
            [Markup.button.callback('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings')],
            [Markup.button.callback('–ú–æ–∏ –ø–µ—á–∞—Ç–∏', 'my_stamps')],
        ]));
    } else {
        ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
bot.action('profile', async (ctx) => {
    const user = ctx.session.user;
    if (user) {
        const message = `–ü—Ä–æ—Ñ–∏–ª—å:
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone}
üìä –£—Ä–æ–≤–µ–Ω—å: ${user.level}
üí∞ –ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${user.bonusBalance}`;

        await ctx.editMessageText(message, Markup.inlineKeyboard([
            [Markup.button.callback('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings')],
            [Markup.button.callback('–ú–æ–∏ –ø–µ—á–∞—Ç–∏', 'my_stamps')],
        ]));
    } else {
        ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.');
    }
});

bot.action('settings', async (ctx) => {
    const user = ctx.session.user;
    if (user) {
        const subscriptionText = user.isSubscribedToAds ? '–û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' : '–í–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É';
        await ctx.editMessageText(`–ù–∞—Å—Ç—Ä–æ–π–∫–∏:
üì© –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${user.isSubscribedToAds ? '–í–∫–ª—é—á–µ–Ω–∞' : '–û—Ç–∫–ª—é—á–µ–Ω–∞'}`, Markup.inlineKeyboard([
            [Markup.button.callback(subscriptionText, user.isSubscribedToAds ? 'unsubscribe_ads' : 'subscribe_ads')],
            [Markup.button.callback('–ù–∞–∑–∞–¥', 'profile')]
        ]));
    } else {
        ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ú–æ–∏ –ü–µ—á–∞—Ç–∏"
bot.action('my_stamps', async (ctx) => {
    const user = await db.collection('users').findOne({ telegramId: ctx.from.id });
    if (!user) {
        return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }

    const stamps = user.stamps || 0;

    const imageBuffer = await generateStampCard(stamps);
    await ctx.replyWithPhoto({ source: imageBuffer });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
bot.action('subscribe_ads', async (ctx) => {
    const user = ctx.session.user;
    if (user) {
        await updateUser(db, user._id, { isSubscribedToAds: true });
        await ctx.editMessageText('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω–∞.', mainMenu());
    } else {
        ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.');
    }
});

bot.action('unsubscribe_ads', async (ctx) => {
    const user = ctx.session.user;
    if (user) {
        await updateUser(db, user._id, { isSubscribedToAds: false });
        await ctx.editMessageText('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞.', mainMenu());
    } else {
        ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.');
    }
});

registerFont(path.join(__dirname, 'media/ShantellSans-Medium.ttf'), { family: 'ShantellSans-Medium' });

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–µ—á–∞—Ç—è–º–∏
async function generateStampCard(stamps) {
    
    const canvas = createCanvas(500, 300); // –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const ctx = canvas.getContext('2d');

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ–Ω–∞
    const background = await loadImage('./media/back.jpg');
    ctx.drawImage(background, 0, 0, canvas.width, canvas.height);

    // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –±–µ–ª—ã–π —Å–ª–æ–π
    ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
    ctx.fillRect(20, 20, canvas.width - 40, canvas.height - 40);

    // –†–∞–º–∫–∞ –≤–æ–∫—Ä—É–≥ –∫–∞—Ä—Ç—ã
    ctx.strokeStyle = '#333';
    ctx.lineWidth = 5;
    ctx.strokeRect(20, 20, canvas.width - 40, canvas.height - 40);

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    ctx.fillStyle = '#000';
    ctx.font = '30px "ShantellSans-Medium"';
    ctx.textAlign = 'center';
    ctx.fillText('–í–∞—à–∏ –ü–µ—á–∞—Ç–∏', canvas.width / 2, 60);

    // –†–∏—Å–æ–≤–∞–Ω–∏–µ –ø–µ—á–∞—Ç–µ–π
    const stampImage = await loadImage('./media/stamp.png'); // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—á–∞—Ç–∏

    for (let i = 0; i < 7; i++) {
        const x = 40 + i * 60;
        const y = 150;

        // –†–∞–º–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–µ—á–∞—Ç–∏
        ctx.strokeStyle = '#888';
        ctx.lineWidth = 3;
        ctx.strokeRect(x, y, 50, 50);

        if (i < stamps) {
            ctx.drawImage(stampImage, x, y, 50, 50);
        }
    }

    // –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–µ—á–∞—Ç–µ–π
    ctx.fillStyle = '#000';
    ctx.font = '20px "Segoe UI", Arial, sans-serif';
    ctx.fillText(`${stamps} / 7 –ü–µ—á–∞—Ç–µ–π`, canvas.width / 2, 250);

    return canvas.toBuffer();
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch();

// Connect to MongoDB and start the bot
initializeDatabase(process.env.MONGODB_URI).then((database) => {
    db = database;
    console.log('Bot started successfully.');
}).catch((err) => {
    console.error('Failed to connect to the database:', err);
});
