require('dotenv').config();
const { Telegraf, Markup, session } = require('telegraf');
const { MongoClient } = require('mongodb');
const { initializeDatabase, getUserByPhone, createUser, updateUser, createOrder, getUserOrders } = require('./database');
const { getLevelInfo } = require('./utils');
const winston = require('winston');

const bot = new Telegraf(process.env.MANAGER_BOT_TOKEN);
let db;
let accessLevel = 'system';
let managerID = 0;

const roles = {
    DEV: 'developer',
    ADMIN: 'admin',
    MANAGER: 'manager',
    CLIENT: 'client'
};

// Middleware to initialize session
bot.use(session());

// Middleware to initialize session data
bot.use(async (ctx, next) => {
    if (!ctx.session) {
        ctx.session = {};
    }
    if (ctx.from) {
        const user = await db.collection('users').findOne({ telegramId: ctx.from.id });
        ctx.state.role = user ? user.role : roles.CLIENT;
        accessLevel = ctx.state.role
        managerID = ctx.from.id
    }
    if(ctx.state.role == roles.CLIENT) return ctx.sendMessage('No Permission!')
    return next();
});

// Setup logging
const logger = winston.createLogger({
    level: 'info',
    format: winston.format.combine(
        winston.format.timestamp(),
        winston.format.printf(({ timestamp, level, message }) => {
            return `${timestamp} [${level}] [${accessLevel}] [${managerID}]: ${message}`;
        })
    ),
    transports: [
        new winston.transports.Console(),
        new winston.transports.File({ filename: 'bot.log' })
    ]
});

// –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
function normalizePhoneNumber(phone) {
    phone = phone.replace(/[^0-9]/g, ''); // –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    if (phone.startsWith('8')) {
        phone = '+7' + phone.slice(1); // –ó–∞–º–µ–Ω–∏—Ç—å 8 –Ω–∞ +7
    } else if (phone.startsWith('7')) {
        phone = '+7' + phone.slice(1); // –ó–∞–º–µ–Ω–∏—Ç—å 7 –Ω–∞ +7
    } else if (!phone.startsWith('+7')) {
        phone = '+7' + phone; // –î–æ–±–∞–≤–∏—Ç—å +7, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    }
    return phone;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
const phoneNumberPattern = /^(?:\+7|8|7)\d{10}$/;

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
bot.on('text', async (ctx) => {
    const text = ctx.message.text.trim();
    logger.info(`Received text message: ${text}`);

    if (phoneNumberPattern.test(text)) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        const phone = normalizePhoneNumber(text);
        logger.info(`Normalized phone number: ${phone}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–ª–∏–µ–Ω—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const user = await getUserByPhone(db, phone);
        if (user) {
            // –ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω
            ctx.session.user = user;  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏
            const orders = await getUserOrders(db, user._id);
            const totalAmount = orders.reduce((sum, order) => sum + order.amount, 0);
            const message = `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:
*Ô∏è‚É£ –°—Ç–∞—Ç—É—Å: ${user.role}  [${user.authorized ? 'üîµ' : '‚ö´'}]
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone}
üìä –£—Ä–æ–≤–µ–Ω—å: ${user.level}
üí∞ –ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${user.bonusBalance}
üí∏ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: ${totalAmount}
üßæ –ü–µ—á–∞—Ç–µ–π: ${user.stamps}
üì© –†–∞—Å—Å—ã–ª–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞? - ${user.isSubscribedToAds ? '–î–∞' : "–ù–µ—Ç"}`;

            const buttons = [
                [Markup.button.callback('üí≥ –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑', 'create_order')],
                [Markup.button.callback('üñãÔ∏è –ü–æ—Å—Ç–∞–≤–∏—Ç—å –ø–µ—á–∞—Ç—å', 'add_stamp')],
                (user.stamps >= 7 ? [Markup.button.callback('üéÅ –û–±–º–µ–Ω—è—Ç—å –Ω–∞ –Ω–∞–ø–∏—Ç–æ–∫', 'redeem_reward')] : [])
            ];

            await ctx.reply(message, Markup.inlineKeyboard(buttons));
            logger.info(`Sent client info message for phone: ${phone}`);
        } else {
            // –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
            ctx.reply('‚ùì –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ñ–µ–ª–∞–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞?', Markup.inlineKeyboard([
                [Markup.button.callback('–î–∞', 'register_yes')],
                [Markup.button.callback('–ù–µ—Ç', 'register_no')]
            ]));
            ctx.session.phone = phone;
            logger.info(`Client not found. Phone number: ${phone}`);
        }
    } else if (ctx.session.user) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞
        const amount = parseFloat(text);
        if (!isNaN(amount)) {
            const user = ctx.session.user;
            const levelInfo = getLevelInfo(user.level, amount);
            await createOrder(db, user._id, amount, levelInfo.bonus);
            await updateUser(db, user._id, {
                level: user.level + levelInfo.levelUp,
                bonusBalance: user.bonusBalance + levelInfo.bonus,
                discount: levelInfo.discount
            });
            ctx.reply(`‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–ª–∏–µ–Ω—Ç–∞: ${user.level + levelInfo.levelUp}, –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${user.bonusBalance + levelInfo.bonus}`);
            ctx.session.user = null; // –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º –∫–ª–∏–µ–Ω—Ç–µ
            logger.info(`Order created for user: ${user.phone}. Amount: ${amount}`);
        } else {
            ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.');
            logger.warn(`Invalid amount input: ${text}`);
        }
    } else {
        ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
bot.action('register_yes', async (ctx) => {
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    const phone = ctx.session.phone;
    if (phone) {
        await createUser(db, { phone, telegramId: ctx.from.id, role: 'client', level: 1, bonusBalance: 0, stamps: 0, authorized: false });
        const message = '‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–∫–∞–∑–∞.';
        ctx.session.user = await getUserByPhone(db, phone);
        ctx.session.phone = null; // –û—á–∏—Å—Ç–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞

        if (ctx.session.messageId) {
            await ctx.telegram.editMessageText(ctx.chat.id, ctx.session.messageId, null, message);
        } else {
            const sentMessage = await ctx.reply(message);
            ctx.session.messageId = sentMessage.message_id;
        }
        logger.info(`Client registered: ${phone}`);
    } else {
        ctx.reply('‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.');
        logger.error('Error occurred during client registration.');
    }
});

bot.action('register_no', (ctx) => {
    const message = '‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.';
    if (ctx.session.messageId) {
        ctx.telegram.editMessageText(ctx.chat.id, ctx.session.messageId, null, message, Markup.inlineKeyboard([
            [Markup.button.callback('üí≥ –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑', 'create_order')],
            [Markup.button.callback('üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ', 'client_info')]
        ]));
    } else {
        ctx.reply(message, Markup.inlineKeyboard([
            [Markup.button.callback('üí≥ –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑', 'create_order')],
            [Markup.button.callback('üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ', 'client_info')]
        ]));
    }
    ctx.session.phone = null; // –û—á–∏—Å—Ç–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    logger.info('Client registration cancelled.');
});

bot.action('create_order', (ctx) => {
    if (ctx.session.user) {
        ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–∫–∞–∑–∞.');
        logger.info('Requesting order amount.');
    } else {
        ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞.');
        logger.warn('Order creation attempted without phone number.');
    }
});

bot.action('add_stamp', async (ctx) => {
    const user = ctx.session.user;
    if (user) {
        const newStamps = Number(user.stamps + 1);
        await updateUser(db, user._id, { stamps: Number(newStamps) });
        user.stamps = newStamps;

        const message = `[${Date.now()}]üßæ –ü–µ—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞. –¢–µ–ø–µ—Ä—å —É –∫–ª–∏–µ–Ω—Ç–∞ ${newStamps} –ø–µ—á–∞—Ç–µ–π.`;
        const buttons = [
            [Markup.button.callback('üí≥ –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑', 'create_order')],
            [Markup.button.callback('üñãÔ∏è –ü–æ—Å—Ç–∞–≤–∏—Ç—å –ø–µ—á–∞—Ç—å', 'add_stamp')],
            (newStamps >= 7 ? [Markup.button.callback('üéÅ –û–±–º–µ–Ω—è—Ç—å –Ω–∞ –Ω–∞–ø–∏—Ç–æ–∫', 'redeem_reward')] : [])
        ];

        await ctx.editMessageText(message, Markup.inlineKeyboard(buttons));
        logger.info(`Stamp added. Total stamps: ${newStamps}`);
    } else {
        ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞.');
        logger.warn('Stamp addition attempted without phone number.');
    }
});

bot.action('redeem_reward', async (ctx) => {
    const user = ctx.session.user;
    if (user) {
        await updateUser(db, user._id, { stamps: user.stamps - 7 }); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—á–∞—Ç–∏
        ctx.reply(`[${Date.now()}] üéâ –û–±–º–µ–Ω –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω! –ü–µ—á–∞—Ç–∏ —Å–±—Ä–æ—à–µ–Ω—ã.`);
        user.stamps -= 7;
        const message = '–ü–µ—á–∞—Ç–∏ –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã.';
        const buttons = [
            [Markup.button.callback('üí≥ –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑', 'create_order')],
            [Markup.button.callback('üñãÔ∏è –ü–æ—Å—Ç–∞–≤–∏—Ç—å –ø–µ—á–∞—Ç—å', 'add_stamp')],
            [Markup.button.callback('üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ', 'client_info')]
        ];

        await ctx.editMessageText(message, Markup.inlineKeyboard(buttons));
        logger.info('Reward redeemed. Stamps reset. ' + Date.now());
    } else {
        ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞.');
        logger.warn('Reward redemption attempted without phone number.');
    }
});

bot.action('client_info', async (ctx) => {
    if (ctx.session.user) {
        const user = ctx.session.user;
        const orders = await getUserOrders(db, user._id);
        const totalAmount = orders.reduce((sum, order) => sum + order.amount, 0);
        const message = `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone}
üìä –£—Ä–æ–≤–µ–Ω—å: ${user.level}
üí∞ –ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${user.bonusBalance}
üí∏ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: ${totalAmount}
üßæ –ü–µ—á–∞—Ç–µ–π: ${user.stamps}`;

        const buttons = [
            [Markup.button.callback('üí≥ –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑', 'create_order')],
            [Markup.button.callback('üñãÔ∏è –ü–æ—Å—Ç–∞–≤–∏—Ç—å –ø–µ—á–∞—Ç—å', 'add_stamp')],
            (user.stamps >= 7 ? [Markup.button.callback('üéÅ –û–±–º–µ–Ω—è—Ç—å –Ω–∞ –Ω–∞–ø–∏—Ç–æ–∫', 'redeem_reward')] : [])
        ];

        await ctx.editMessageText(message, Markup.inlineKeyboard(buttons));
        logger.info('Client info requested.');
    } else {
        ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞.');
        logger.warn('Client info requested without phone number.');
    }
});

bot.launch();

// Connect to MongoDB and start the bot
initializeDatabase(process.env.MONGODB_URI).then((database) => {
    db = database;
    logger.info('Bot started successfully.');
}).catch((err) => {
    logger.error('Failed to connect to the database:', err);
});
